---
title: "AI for the Second-Hand Fashion Industry"
author: Farrukh Nauman
email: farrukh.nauman@ri.se
description: "Explore how AI is revolutionizing the second-hand fashion industry through automated solutions for sustainable fashion."
keywords: [AI, second-hand fashion, dataset, fashion, automation, sustainable fashion, machine learning, computer vision]
format:
  html:
    grid:
      sidebar-width: 0px
      body-width: 1200px
      margin-width: 250px
    toc: false
    include-in-header:
      text: |
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    metadata:
      og:title: "AI for the Second-Hand Fashion Industry"
      og:description: "Explore how AI is revolutionizing the second-hand fashion industry through automated solutions for sustainable fashion."
      og:type: "website"
      twitter:card: "summary_large_image"
      twitter:title: "AI for the Second-Hand Fashion Industry"
      twitter:description: "Explore how AI is revolutionizing the second-hand fashion industry through automated solutions for sustainable fashion."
    meta-tags:
      - name: "keywords"
        content: "AI, second-hand fashion, dataset, fashion, automation, sustainable fashion, machine learning, computer vision"
      - name: "description"
        content: "Explore how AI is revolutionizing the second-hand fashion industry through automated solutions for sustainable fashion."
      - name: "author"
        content: "Farrukh Nauman"
---

::: {.hero-section}
# Automating the Second-Hand Fashion Industry

The fashion industry contributes up to 10% of global greenhouse gas emissions. While the second-hand fashion sector offers a sustainable alternative, its operations remain largely manual. Our projects aim to drive this industry towards automation through a **large annotated open dataset** and AI models.

::: {.hero-buttons}
[View Dataset](https://zenodo.org/records/13788681){.btn-primary}
[Read Updates](#recent-posts){.btn-secondary}
:::
:::

## Recent Updates {#recent-posts}

::: {.column-screen-inset}
:::: {.listing-block}
::: {#recent-posts-content}
:::
::::
:::

```{python}
#| echo: false
from IPython.display import HTML
import os
import yaml
from datetime import datetime
from pathlib import Path
import logging

# Setup basic logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_post_info(post_path):
    try:
        with open(post_path, 'r', encoding='utf-8') as f:
            content = f.read().split('---')
            if len(content) > 1:
                try:
                    metadata = yaml.safe_load(content[1])
                    if not metadata.get('date') or not metadata.get('title'):
                        logger.warning(f"Missing required metadata in {post_path}")
                        return None
                    return {
                        'title': metadata.get('title', ''),
                        'date': metadata.get('date', ''),
                        'description': metadata.get('description', ''),
                        'path': str(post_path.parent.relative_to(Path('posts')))
                    }
                except yaml.YAMLError as e:
                    logger.error(f"YAML parsing error in {post_path}: {e}")
                    return None
    except Exception as e:
        logger.error(f"Error processing {post_path}: {e}")
        return None
    return None

# Find all post files
posts = []
posts_dir = Path('posts')
try:
    for post_file in posts_dir.glob('*/index.qmd'):
        post_info = get_post_info(post_file)
        if post_info:
            posts.append(post_info)
            # logger.info(f"Found post: {post_info['title']} ({post_info['date']})")
except Exception as e:
    logger.error(f"Error scanning posts directory: {e}")

# Sort posts by date, most recent first
posts.sort(key=lambda x: x['date'], reverse=True)

# Take only the 3 most recent posts
recent_posts = posts[:3]

html_content = '<div class="recent-posts-grid">'
for post in recent_posts:
    html_content += f'''
    <div class="post-card">
        <h3><a href="posts/{post['path']}">{post['title']}</a></h3>
        <p class="post-date">{post['date']}</p>
        <p class="post-description">{post['description']}</p>
    </div>
    '''
html_content += '</div>'

HTML(html_content)
```

## Project Overview

The dataset for this project was created by a collaboration between [Warg√∂n Innovation AB](https://wargoninnovation.se/en/), [Myrorna AB](https://www.myrorna.se/) and [RISE Research Institutes of Sweden AB](https://www.ri.se/en).  

(**2025-02-06**: The following section images are placeholders at the moment and will direct to model pages soon. In the meantime, check our demo from more than a year ago: [fashion-demo](https://huggingface.co/spaces/fashion-demo-organization/fashion_demo))

::: {.grid}
::: {.g-col-6}
<div class="image-card">
<img src="assets/sorting_gemini.jpeg" alt="sorting" class="feature-image"/>
<div class="image-caption">Automated sorting process through Attribute Recognition</div>
</div>
:::
::: {.g-col-6}
<div class="image-card">
<img src="assets/damaged_tshirt.jpg" alt="damaged t-shirt" class="feature-image"/>
<div class="image-caption">AI-powered damage detection in clothing</div>
</div>
:::
:::

## Dataset Statistics {#stats}

::: {.stats-section}
<div class="stats-card">
<div id="dataset-stats">Loading dataset statistics...</div>
</div>
:::

<script>
  async function fetchDatasetStats() {
    try {
      const response = await fetch('https://zenodo.org/api/records/13788681');
      const data = await response.json();
      const stats = `
        <div class="stats-grid">
          <div class="stat-item">
            <h3>${data.stats.downloads}</h3>
            <p>Downloads</p>
          </div>
          <div class="stat-item">
            <h3>${data.stats.views}</h3>
            <p>Views</p>
          </div>
          <div class="stat-item">
            <h3>${data.metadata.title}</h3>
            <p>Dataset Name</p>
          </div>
        </div>
      `;
      document.getElementById('dataset-stats').innerHTML = stats;
    } catch (error) {
      document.getElementById('dataset-stats').innerHTML = 'Failed to load dataset statistics.';
    }
  }

  fetchDatasetStats();
  setInterval(fetchDatasetStats, 600000);
</script>

::: {.contact-section}
## Contact

Feel free to reach out to me:

- **Name:** Farrukh Nauman
- **Email:** [farrukh.nauman@ri.se](mailto:farrukh.nauman@ri.se)
- **Website:** [fnauman.github.io](https://fnauman.github.io)
- **LinkedIn:** [Connect with me](https://linkedin.com/in/fnauman)
- **Twitter:** [Follow me](https://twitter.com/naumanf_)
:::

::: {.footer}
 2025 Farrukh Nauman (farrukh.nauman@ri.se). All rights reserved.
:::

<style>
body {
  min-height: 100vh;
  position: relative;
  margin: 0;
  padding-bottom: 60px; /* Height of the footer */
}

.contact-section {
  margin: 2rem 0;
  padding: 2rem;
  background-color: #f8f9fa;
  border-radius: 8px;
}

.contact-section h2 {
  margin-bottom: 1.5rem;
  color: #333;
}

.contact-section ul {
  list-style: none;
  padding: 0;
}

.contact-section li {
  margin-bottom: 0.5rem;
}

.contact-section a {
  color: #0066cc;
  text-decoration: none;
}

.contact-section a:hover {
  text-decoration: underline;
}

.footer {
  position: absolute;
  bottom: 0;
  width: 100%;
  height: 60px;
  padding: 1rem 0;
  text-align: center;
  font-size: 0.9rem;
  color: #666;
  border-top: 1px solid #eee;
  background-color: #fff;
}
</style>
